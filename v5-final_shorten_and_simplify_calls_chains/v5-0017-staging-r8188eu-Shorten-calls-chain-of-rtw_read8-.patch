From bcfbf4d6a3dda46818d041737ede5612e43020a4 Mon Sep 17 00:00:00 2001
From: "Fabio M. De Francesco" <fmdefrancesco@gmail.com>
Date: Tue, 14 Sep 2021 12:30:19 +0200
Subject: [PATCH v5 17/18] staging: r8188eu: Shorten calls chain of rtw_read8/16/32()

Shorten the calls chain of rtw_read8/16/32() down to the actual reads.
For this purpose unify the three usb_read8/16/32 into the new
usb_read(); make the latter parameterizable with 'size'; embed most of
the code of usbctrl_vendorreq() into usb_read() and use in it the new
usb_control_msg_recv() API of USB Core.

Suggested-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Co-developed-by: Pavel Skripkin <paskripkin@gmail.com>
Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
Signed-off-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
---

v4->v5: Fix an error in testing for values returned by
	usb_control_msg_recv(). Restore the while loop because there are
	indeed cases wnere the loop is needed (i.e., recoverable
	errors).
v3->v4:
        Make some changes according to a first review of Greg
        Kroah-Hartman; remove unnecessary while loop and a couple of
        'if' test; handle the errors returned by usb_control_msg_recv()
v2->v3:
        No changes.
v1->v2:
        No changes.

 drivers/staging/r8188eu/hal/usb_ops_linux.c | 68 ++++++++++++++++++++-
 1 file changed, 65 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/r8188eu/hal/usb_ops_linux.c b/drivers/staging/r8188eu/hal/usb_ops_linux.c
index 04402bab805e..b9188d61cbe1 100644
--- a/drivers/staging/r8188eu/hal/usb_ops_linux.c
+++ b/drivers/staging/r8188eu/hal/usb_ops_linux.c
@@ -89,6 +89,68 @@ static int usbctrl_vendorreq(struct intf_hdl *intfhdl, u16 value, void *data, u1
 	return status;
 }
 
+static int usb_read(struct intf_hdl *intfhdl, u16 addr, void *data, u8 size)
+{
+	int status;
+	u8 *io_buf; /* pointer to I/O buffer */
+	int vendorreq_times = 0;
+	struct adapter *adapt = intfhdl->padapter;
+	struct dvobj_priv *dvobjpriv = adapter_to_dvobj(adapt);
+	struct usb_device *udev = dvobjpriv->pusbdev;
+
+	if (adapt->bSurpriseRemoved || adapt->pwrctrlpriv.pnp_bstop_trx)
+		return -EPERM;
+
+	if (size > MAX_VENDOR_REQ_CMD_SIZE)
+		return -EINVAL;
+
+	mutex_lock(&dvobjpriv->usb_vendor_req_mutex);
+
+	io_buf = dvobjpriv->usb_vendor_req_buf;
+
+	while (++vendorreq_times <= MAX_USBCTRL_VENDORREQ_TIMES) {
+		status = usb_control_msg_recv(udev, 0, REALTEK_USB_VENQT_CMD_REQ,
+					      REALTEK_USB_VENQT_READ, addr,
+					      REALTEK_USB_VENQT_CMD_IDX, io_buf,
+					      size, RTW_USB_CONTROL_MSG_TIMEOUT,
+					      GFP_KERNEL);
+		switch (status) {
+		case 0:
+			/*  success */
+			rtw_reset_continual_urb_error(dvobjpriv);
+			memcpy(data, io_buf, size);
+			goto unlock_and_exit;
+		/* failures */
+		case -ESHUTDOWN:
+		case -ENODEV:
+		case -ENOENT:
+			/*
+			 * device or controller has been disabled due to
+			 * some problem that could not be worked around,
+			 * device or bus doesnâ€™t exist, endpoint does not
+			 * exist or is not enabled.
+			 */
+			adapt->bSurpriseRemoved = true;
+			goto unlock_and_exit;
+		default:
+			struct hal_data_8188e *haldata = GET_HAL_DATA(adapt);
+
+			haldata->srestpriv.wifi_error_status = USB_VEN_REQ_CMD_FAIL;
+			if (rtw_inc_and_chk_continual_urb_error(dvobjpriv)) {
+				adapt->bSurpriseRemoved = true;
+				goto unlock_and_exit;
+			}
+			/*  firmware download is checksummed, don't retry */
+			if (addr >= FW_8188E_START_ADDRESS && addr <= FW_8188E_END_ADDRESS)
+				goto unlock_and_exit;
+			break;
+		}
+	}
+unlock_and_exit:
+	mutex_unlock(&dvobjpriv->usb_vendor_req_mutex);
+	return status;
+}
+
 u8 rtw_read8(struct adapter *adapter, u32 addr)
 {
 	u8 data;
@@ -96,7 +158,7 @@ u8 rtw_read8(struct adapter *adapter, u32 addr)
 	struct intf_hdl *intfhdl = &io_priv->intf;
 	u16 address = (u16)(addr & 0xffff);
 
-	usbctrl_vendorreq(intfhdl, address, &data, 1, REALTEK_USB_VENQT_READ);
+	usb_read(intfhdl, address, &data, 1);
 
 	return data;
 }
@@ -108,7 +170,7 @@ u16 rtw_read16(struct adapter *adapter, u32 addr)
 	struct io_priv *io_priv = &adapter->iopriv;
 	struct intf_hdl *intfhdl = &io_priv->intf;
 
-	usbctrl_vendorreq(intfhdl, address, &data, 2, REALTEK_USB_VENQT_READ);
+	usb_read(intfhdl, address, &data, 2);
 
 	return le16_to_cpu(data);
 }
@@ -120,7 +182,7 @@ u32 rtw_read32(struct adapter *adapter, u32 addr)
 	struct io_priv *io_priv = &adapter->iopriv;
 	struct intf_hdl *intfhdl = &io_priv->intf;
 
-	usbctrl_vendorreq(intfhdl, address, &data, 4, REALTEK_USB_VENQT_READ);
+	usb_read(intfhdl, address, &data, 4);
 
 	return le32_to_cpu(data);
 }
-- 
2.33.0

